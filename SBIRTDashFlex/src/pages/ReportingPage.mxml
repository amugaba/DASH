<?xml version="1.0" encoding="utf-8"?>
<questions:QuestionPage xmlns:fx="http://ns.adobe.com/mxml/2009"
						xmlns:s="library://ns.adobe.com/flex/spark"
						xmlns:mx="library://ns.adobe.com/flex/mx"
						xmlns:questions="questions.*"
						xmlns:datareportservice="services.datareportservice.*"
						backgroundColor="#F2F9F1"  chromeColor="#82BE6D"
						contentBackgroundColor="#D8EFD3">
	<fx:Script>
		<![CDATA[
			import flashx.textLayout.conversion.TextConverter;
			import flashx.textLayout.edit.IEditManager;
			import flashx.textLayout.elements.FlowElement;
			import flashx.textLayout.elements.FlowGroupElement;
			import flashx.textLayout.elements.LinkElement;
			import flashx.textLayout.events.FlowElementMouseEvent;
			
			import mx.collections.ArrayList;
			import mx.controls.Alert;
			import mx.controls.HRule;
			import mx.core.FlexGlobals;
			import mx.events.FlexEvent;
			import mx.events.ValidationResultEvent;
			import mx.rpc.events.ResultEvent;
			import mx.validators.ValidationResult;
			
			import questions.*;
			
			import skip.*;
			
			import spark.components.Button;
			import spark.components.FormItem;
			import spark.components.NavigatorContent;
			import spark.components.RichEditableText;
			import spark.components.RichText;
			import spark.primitives.Line;
			
			import valueObjects.DataReportVO;
			
			protected var global:SBIRTDashFlex = FlexGlobals.topLevelApplication as SBIRTDashFlex;
			
			public var updatingData:Boolean = false;
			private var year1:int = new Date().getFullYear();
			private var year2:int = year1 - 1;
			
			private var month:QuestionList = new QuestionList("For what month are you reporting data?",global.monthList,-1);
			private var year:QuestionList = new QuestionList("For what year?", new ArrayList([year1, year2]),0);
			private var uniquePatients:QuestionTextRefusable = new QuestionTextRefusable("During <b><u>____</b></u>, how many <a>unique patients</a> aged 18 or older had a primary care visit?","");
			
			private var uniquePatientsLabel:QuestionClass = new QuestionClass("<b>Of those <u>____</u> unique patients...</b><br>");
			private var patientsEligible:QuestionTextRefusable = new QuestionTextRefusable("How many patients <a>had not yet been prescreened in the last year?</a>","");
			private var prescreensEligible:QuestionTextRefusable = new QuestionTextRefusable("How many did you prescreen that had NOT received a prescreen in the last year?","");
			private var prescreensIneligible:QuestionTextRefusable = new QuestionTextRefusable("How many did you prescreen that had already received a prescreen in the last year?","");
			
			private var prescreensLabel:QuestionClass = new QuestionClass("<b>Of those <u>____</u> total patients prescreened...</b><br>");
			private var alcoholPrescreens:QuestionTextRefusable = new QuestionTextRefusable("How many were positive for alcohol but negative for drugs?","");
			private var drugPrescreens:QuestionTextRefusable = new QuestionTextRefusable("How many were positive for drugs but negative for alcohol?","");
			private var bothPrescreens:QuestionTextRefusable = new QuestionTextRefusable("How many were positive for both alcohol and drugs?","");
			
			private var screensAll:QuestionTextRefusable = new QuestionTextRefusable("Of those <b><u>____</b></u> positive patients, how many received a full screening?","");
			private var isNotScreening:QuestionList = new QuestionList("Does your site prescreen some patients in buildings, units, or other areas where it is not yet possible " +
				"for those patients to receive a full screening?", new ArrayList(["No","Yes"]),0);
			
			//If not screening some patients
			private var possibleScreens:QuestionTextRefusable = new QuestionTextRefusable("Of the <b><u>____</b></u> total positive prescreens, how many occurred in an area of your clinic where it is <a>possible to receive a full screening</a>?","");
			private var screensOfPossible:QuestionTextRefusable = new QuestionTextRefusable("Of those <b><u>____</b></u> positive patients that were in a clinic area that does full screenings, how many received a full screening?","");			
			
			private var screeningsLabel:QuestionClass = new QuestionClass("<b><br>Of those <u>____</u> full screenings...</b><br>");
			private var educationScore:QuestionTextRefusable = new QuestionTextRefusable("How many scored ‘Education’?","");
			private var biScore:QuestionTextRefusable = new QuestionTextRefusable("How many scored ‘Brief Intervention’?","");
			private var btScore:QuestionTextRefusable = new QuestionTextRefusable("How many scored ‘Brief Treatment’?","");
			private var rtScore:QuestionTextRefusable = new QuestionTextRefusable("How many scored ‘Referral to Treatment’?","");
			
			private var servicesLabel:QuestionClass = new QuestionClass("<b><a>Services</a></b>");
			private var biServices:QuestionTextRefusable = new QuestionTextRefusable("How many Brief Interventions were performed?","");
			private var btServices:QuestionTextRefusable = new QuestionTextRefusable("How many Brief Treatments were performed?","");
			private var rtServices:QuestionTextRefusable = new QuestionTextRefusable("How many Referrals to Treatment were performed?","");
			
			//private var organizationChanges:QuestionTextArea = new QuestionTextArea("<b>Describe any organizational changes relevant to SBIRT:</b>","");
			//private var successBarrier:QuestionTextArea = new QuestionTextArea("<b>List any other successes or barriers that occurred:</b>","");
			//private var sustainability:QuestionTextArea = new QuestionTextArea("<b>Describe any progress towards sustainability:</b>","");
			private var otherComments:QuestionTextArea = new QuestionTextArea("<b>Other comments:</b>","");
			
			public function prepare():void
			{
				if(constructed)
				{
					resetPage();
					return;
				}
				constructed = true;
				
				var i:FormItem = new FormItem();
				i.label = "All fields are required. If you are unable to answer a question, use the drop-down and select \"Missing Data\"";
				reportingForm.addElement(i);
				
				//Add questions
				reportingForm.addElement(month);
				reportingForm.addElement(year);
				reportingForm.addElement(uniquePatients);
				uniquePatients.helpText = "If a patient came for multiple visits, only count that patient once.";
				addHRule(reportingForm);
				
				reportingForm.addElement(uniquePatientsLabel);
				uniquePatientsLabel.text.setStyle("paddingLeft",15);
				reportingForm.addElement(patientsEligible);
				patientsEligible.helpText = "This is the number of patients who were due for their annual SBIRT screening.";
				reportingForm.addElement(prescreensEligible);
				reportingForm.addElement(prescreensIneligible);
				addHRule(reportingForm);
				
				reportingForm.addElement(prescreensLabel);
				prescreensLabel.text.setStyle("paddingLeft",15);
				reportingForm.addElement(alcoholPrescreens);
				reportingForm.addElement(drugPrescreens);
				reportingForm.addElement(bothPrescreens);
				addHRule(reportingForm);
				
				i = new FormItem();
				i.label = "Screenings";
				reportingForm.addElement(i);
				reportingForm.addElement(screensAll);
				reportingForm.addElement(isNotScreening);
				reportingForm.addElement(possibleScreens);
				reportingForm.addElement(screensOfPossible);
				
				reportingForm2.addElement(screeningsLabel);
				screeningsLabel.text.setStyle("paddingLeft",15);
				reportingForm2.addElement(educationScore);
				reportingForm2.addElement(biScore);
				reportingForm2.addElement(btScore);
				reportingForm2.addElement(rtScore);
				addHRule(reportingForm2);
				
				reportingForm2.addElement(servicesLabel);
				servicesLabel.text.setStyle("paddingLeft",15);
				servicesLabel.helpText = "The ‘services performed’ numbers may differ from the above ‘screening scores’ numbers. \n\nThis is because the behavioral health specialist may provide a higher level intervention than the screening score indicates based on clinical judgment. There also may be situations where a service cannot be performed due to time or other constraints.";
				reportingForm2.addElement(biServices);
				reportingForm2.addElement(btServices);
				reportingForm2.addElement(rtServices);
				addHRule(reportingForm2);
				
				//reportingForm3.addElement(organizationChanges);
				//reportingForm3.addElement(successBarrier);
				//reportingForm3.addElement(sustainability);
				reportingForm2.addElement(otherComments);
				
				//Bind question answers
				month.bindToQuestionLabel(uniquePatients,"____");
				uniquePatients.bindToQuestionLabel(uniquePatientsLabel,"____");
				//uniquePatients.bindToQuestionLabel(prescreensAll,"____");
				//prescreensAll.bindToQuestionLabel(prescreensLabel,"____");
				screensAll.bindToQuestionLabel(screeningsLabel,"____");
				screensAll.bindToQuestionLabel(possibleScreens,"____");
				possibleScreens.bindToQuestionLabel(screensOfPossible,"____");
				
				addSkipDropDown(isNotScreening,["No"],[possibleScreens,screensOfPossible]);

				prescreensEligible.bindFunction(replacePrescreensLabel);
				prescreensIneligible.bindFunction(replacePrescreensLabel);
				
				alcoholPrescreens.bindFunction(replaceScreeningsLabel);
				drugPrescreens.bindFunction(replaceScreeningsLabel);
				bothPrescreens.bindFunction(replaceScreeningsLabel);
				
				//Adjust horizontal position
				var indent:int = 50;
				month.text.setStyle("paddingLeft",indent);
				year.text.setStyle("paddingLeft",indent);
				uniquePatients.text.setStyle("paddingLeft",indent);
				patientsEligible.text.setStyle("paddingLeft",indent);
				prescreensEligible.text.setStyle("paddingLeft",indent);
				prescreensIneligible.text.setStyle("paddingLeft",indent);
				alcoholPrescreens.text.setStyle("paddingLeft",indent);
				drugPrescreens.text.setStyle("paddingLeft",indent);
				bothPrescreens.text.setStyle("paddingLeft",indent);
				screensAll.text.setStyle("paddingLeft",indent);
				isNotScreening.text.setStyle("paddingLeft",indent);
				possibleScreens.text.setStyle("paddingLeft",indent);
				screensOfPossible.text.setStyle("paddingLeft",indent);
				educationScore.text.setStyle("paddingLeft",indent);
				biScore.text.setStyle("paddingLeft",indent);
				btScore.text.setStyle("paddingLeft",indent);
				rtScore.text.setStyle("paddingLeft",indent);
				biServices.text.setStyle("paddingLeft",indent);
				btServices.text.setStyle("paddingLeft",indent);
				rtServices.text.setStyle("paddingLeft",indent);
				otherComments.text.setStyle("paddingLeft",indent);
				
				//Add Validators
				addNumberValidator(month,0);
				addNumberValidator(uniquePatients,0,Number.NaN,true);
				addNumberValidator(patientsEligible,0,Number.NaN,true);
				addNumberValidator(prescreensEligible,0,Number.NaN,true);
				addNumberValidator(prescreensIneligible,0,Number.NaN,true);
				addNumberValidator(alcoholPrescreens,0,Number.NaN,true);
				addNumberValidator(drugPrescreens,0,Number.NaN,true);
				addNumberValidator(bothPrescreens,0,Number.NaN,true);
				addNumberValidator(screensAll,0,Number.NaN,true);
				addNumberValidator(possibleScreens,0,Number.NaN,true);
				addNumberValidator(screensOfPossible,0,Number.NaN,true);
				addNumberValidator(educationScore,0,Number.NaN,true);
				addNumberValidator(biScore,0,Number.NaN,true);
				addNumberValidator(btScore,0,Number.NaN,true);
				addNumberValidator(rtScore,0,Number.NaN,true);
				addNumberValidator(biServices,0,Number.NaN,true);
				addNumberValidator(btServices,0,Number.NaN,true);
				addNumberValidator(rtServices,0,Number.NaN,true);
			}
			
			public function replacePrescreensLabel(val:String):void
			{
				var sum:int = 0;
				
				if(!isNaN(parseInt(prescreensEligible.answer)))
					sum += parseInt(prescreensEligible.answer);
				
				if(!isNaN(parseInt(prescreensIneligible.answer)))
					sum += parseInt(prescreensIneligible.answer);
				
				if(sum != 0)
				{
					var newLabel:String = prescreensLabel.baseLabel.replace("____",sum);
					prescreensLabel.label = newLabel;
				}
				else
					prescreensLabel.label = prescreensLabel.baseLabel;
			}
			
			public function replaceScreeningsLabel(val:String):void
			{
				var sum:int = 0;

				if(!isNaN(parseInt(alcoholPrescreens.answer)))
					sum += parseInt(alcoholPrescreens.answer);

				if(!isNaN(parseInt(drugPrescreens.answer)))
					sum += parseInt(drugPrescreens.answer);

				if(!isNaN(parseInt(bothPrescreens.answer)))
					sum += parseInt(bothPrescreens.answer);
				
				if(sum != 0)
				{
					var newLabel:String = screensAll.baseLabel.replace("____",sum);
					screensAll.label = newLabel;
				}
				else
					screensAll.label = screensAll.baseLabel;
			}
			
			protected function resetPage():void
			{
				tabNavigator.selectedIndex = 0; 
				updatingData = false;
				month.input.enabled = true;
				year.input.enabled = true;
				submitButton.label = "Submit Data!";
				for each(var q:Object in reportingForm.getChildren())
				{
					if(q is QuestionClass)
						(q as QuestionClass).restoreDefault();
				}
				for each(q in reportingForm2.getChildren())
				{
					if(q is QuestionClass)
						(q as QuestionClass).restoreDefault();
				}
			}
			
			protected function submitButton_clickHandler(event:MouseEvent):void
			{
				var results:Array = validateForm(reportingForm);
				var results2:Array = validateForm(reportingForm2);
				if(results.length > 0 || results2.length > 0)
				{
					Alert.show("Please complete all fields with valid answers.","Validation Errors");
					return;
				}
	
				//if not updating form, the report date has to be unique and in the past
				if(!updatingData)
				{
					var reportDate:Date = new Date(parseInt(year.answer), month.answerIndex-1, 1);
					if(reportDate > new Date())
						Alert.show("The report's date cannot be in the future.", "Validation Errors");
					else					
						reportExistsResult.token = dataReportService.reportExists(global.activeUser.autoid, month.answerIndex, parseInt(year.answer));
				}
				else
					parseForm();
			}
			
			protected function reportExistsResult_resultHandler(event:ResultEvent):void
			{
				if(reportExistsResult.lastResult)
					Alert.show("A report with this month and year has already been submitted.", "Validation Errors");
				else
					parseForm();
			}
			
			protected function parseForm():void
			{
				var report:DataReportVO = new DataReportVO();
				report.userid = global.activeUser.autoid;
				report.month = month.answerIndex;
				report.year = parseInt(year.answer);
				
				if(updatingData)
					report = global.activeReport;
				
				report.uniquePatients = parseInt(uniquePatients.answer);
				report.patientsEligible = parseInt(patientsEligible.answer);
				report.validPrescreens = parseInt(prescreensEligible.answer);
				report.prescreens = report.validPrescreens + parseInt(prescreensIneligible.answer);
				report.alcoholPrescreens = parseInt(alcoholPrescreens.answer);
				report.drugPrescreens = parseInt(drugPrescreens.answer);
				report.bothPrescreens = parseInt(bothPrescreens.answer);
				report.screens = parseInt(screensAll.answer);
				report.isNotScreening = isNotScreening.answerIndex;
				report.possibleScreens = parseInt(possibleScreens.answer);
				report.screensOfPossible = parseInt(screensOfPossible.answer);
				report.educationScores = parseInt(educationScore.answer);
				report.biScores = parseInt(biScore.answer);
				report.btScores = parseInt(btScore.answer);
				report.rtScores = parseInt(rtScore.answer);
				report.bis = parseInt(biServices.answer);
				report.bts = parseInt(btServices.answer);
				report.rts = parseInt(rtServices.answer);
				report.otherComments = otherComments.answer;
				
				if(!updatingData)
					createDataReportResult.token = dataReportService.createDataReport(report);
				else
					updateDataReportResult.token = dataReportService.updateDataReport(report);
			}
			
			public function populate(report:DataReportVO):void
			{
				updatingData = true;
				submitButton.label = "Update Data!";
				month.input.enabled = false;
				year.input.enabled = false;
				month.answerIndex = report.month;
				year.answerIndex = year1 - report.year + 1;
				uniquePatients.answer = report.uniquePatients.toString(); 
				patientsEligible.answer = report.patientsEligible.toString();
				prescreensEligible.answer = report.validPrescreens.toString();
				prescreensIneligible.answer = (report.prescreens - report.validPrescreens).toString();
				alcoholPrescreens.answer = report.alcoholPrescreens.toString();
				drugPrescreens.answer = report.drugPrescreens.toString();
				bothPrescreens.answer = report.bothPrescreens.toString();
				screensAll.answer = report.screens.toString();
				isNotScreening.answerIndex = report.isNotScreening;
				possibleScreens.answer = report.possibleScreens.toString();
				screensOfPossible.answer = report.screensOfPossible.toString();
				educationScore.answer = report.educationScores.toString();
				biScore.answer = report.biScores.toString();
				btScore.answer = report.btScores.toString();
				rtScore.answer = report.rtScores.toString();
				biServices.answer = report.bis.toString();
				btServices.answer = report.bts.toString();
				rtServices.answer = report.rts.toString();
				otherComments.answer = report.otherComments;
			}
			
			protected function createDataReportResult_resultHandler(event:ResultEvent):void
			{
				var report:DataReportVO = createDataReportResult.lastResult;
				if(report != null)
					Alert.show("Report submitted successfully!");
			}
			
			protected function addHRule(form:Form):void
			{
				var rule:HRule = new HRule();
				rule.width = reportingForm.width;
				rule.height = 10;
				form.addElement(rule);
			}
			
			protected function updateDataReportResult_resultHandler(event:ResultEvent):void
			{
				var report:DataReportVO = updateDataReportResult.lastResult;
				if(report != null)
					Alert.show("Report updated successfully!");
			}
			
		]]>
	</fx:Script>
	<fx:Declarations>
		<s:CallResponder id="createDataReportResult" result="createDataReportResult_resultHandler(event)"/>
		<datareportservice:DataReportService id="dataReportService"
											 fault="Alert.show(event.fault.faultString + '\n' + event.fault.faultDetail)"
											 showBusyCursor="true"/>
		<s:CallResponder id="reportExistsResult" result="reportExistsResult_resultHandler(event)"/>
		<s:CallResponder id="updateDataReportResult" result="updateDataReportResult_resultHandler(event)"/>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
	<mx:TabNavigator x="7" y="24" width="685" height="650" paddingLeft="-15" paddingTop="-5" id="tabNavigator">
		<s:NavigatorContent width="100%" height="100%" label="Page 1">
			<mx:Form id="reportingForm" width="100%" height="100%" labelWidth="450">
			</mx:Form>
		</s:NavigatorContent>
		<s:NavigatorContent width="100%" height="100%" label="Page 2">
			<mx:Form id="reportingForm2" width="100%" height="100%" labelWidth="450">
			</mx:Form>
			<s:Button id="submitButton" x="312" y="472" height="42" label="Save"
					  click="submitButton_clickHandler(event)"/>
		</s:NavigatorContent>
	</mx:TabNavigator>
	<s:Label x="246" y="16" fontSize="22" fontWeight="normal" text="SBIRT Data Reporting"/>
	
</questions:QuestionPage>
